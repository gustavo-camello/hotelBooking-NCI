/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package HotelBookings;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author DouglasMasotti, GustavoCamello, DanielPinton
 */
public class hotelBookingsGUI extends javax.swing.JFrame {
    
    // declaring all objects
    private String firstName;
    private String lastName;
    private int nightsQntt;
    private int singleBedsQnttlbl;
    private int doubleBedsQnttlbl;
    private int bathQnttlbl;
    private int counterbreak;
    private double nightPrice;
    private double singlePrice;
    private double doublePrice;
    private double bathPrice;
    private double finalPrice;
    
    // declaring arrayList of objects
    private ArrayList <hotelBookings> aList;
            
    //declaring counter
    int count;

    // constructor for objects
    public hotelBookingsGUI() {
        initComponents();
       
        aList = new ArrayList <>();
        firstName = new String();
        lastName = new String();
        nightsQntt = 0;
        singleBedsQnttlbl = 0;
        doubleBedsQnttlbl = 0;
        bathQnttlbl = 0;
        
        count = 0;
        // counter created to be a stop in the program, making it understand if exists an error
        counterbreak = 0;
        
        //the prices for our HotelBookings are pre-defined and will not change through the project
        nightPrice = 50.0;
        singlePrice = 15.0;
        doublePrice = 25.0;
        bathPrice = 40.0;
        finalPrice = 0.0;
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        titlelbl = new javax.swing.JLabel();
        firstNamelbl = new javax.swing.JLabel();
        lastNamelbl = new javax.swing.JLabel();
        nightsQnttlbl = new javax.swing.JLabel();
        firstNameText = new javax.swing.JTextField();
        lastNameText = new javax.swing.JTextField();
        nightsQnttText = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        displayBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        readBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        singleBedsQnttText = new javax.swing.JTextField();
        bathQnttText = new javax.swing.JTextField();
        doubleBedsQnttText = new javax.swing.JTextField();
        singleBedsQntt = new javax.swing.JLabel();
        doubleBedsQntt = new javax.swing.JLabel();
        bathQntt = new javax.swing.JLabel();
        checkPrice = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titlelbl.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        titlelbl.setText("Booking Application");

        firstNamelbl.setText("First Name:");

        lastNamelbl.setText("Last Name: ");

        nightsQnttlbl.setText("Nights? (1 - 7)");

        firstNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameTextActionPerformed(evt);
            }
        });

        nightsQnttText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nightsQnttTextActionPerformed(evt);
            }
        });

        addBtn.setText("Confirm Booking");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        displayBtn.setText("Check Last Booking Inserted");
        displayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search by Last Name");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete Booking");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        readBtn.setText("Check All Bookings Registered");
        readBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Please, insert in numbers, how many: (limit)");

        singleBedsQnttText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleBedsQnttTextActionPerformed(evt);
            }
        });

        bathQnttText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bathQnttTextActionPerformed(evt);
            }
        });

        doubleBedsQnttText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleBedsQnttTextActionPerformed(evt);
            }
        });

        singleBedsQntt.setText("Single beds? (0 - 1)");

        doubleBedsQntt.setText("Double beds? (0 - 1)");

        bathQntt.setText("Bathrooms? (1 - 2)");

        checkPrice.setText("Check Price");
        checkPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPriceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titlelbl)
                .addGap(117, 117, 117))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(readBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bathQntt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(bathQnttText, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nightsQnttlbl)
                            .addComponent(firstNamelbl)
                            .addComponent(lastNamelbl)
                            .addComponent(singleBedsQntt)
                            .addComponent(doubleBedsQntt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(doubleBedsQnttText)
                            .addComponent(firstNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(nightsQnttText)
                            .addComponent(lastNameText)
                            .addComponent(singleBedsQnttText)))
                    .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(titlelbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNamelbl)
                    .addComponent(firstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNamelbl)
                    .addComponent(lastNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nightsQnttlbl)
                    .addComponent(nightsQnttText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(singleBedsQnttText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(singleBedsQntt))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doubleBedsQnttText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doubleBedsQntt))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bathQnttText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bathQntt))
                .addGap(18, 18, 18)
                .addComponent(checkPrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(displayBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(readBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteBtn)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void firstNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameTextActionPerformed
        // TODO add your handling code here:
        //getting the first and last name from the Text Field
        firstName = firstNameText.getText();
        lastName = lastNameText.getText();
        
        //getting the Text Field and parseing into a Integer (it will have a limit between 1 and 7)
        nightsQntt = Integer.parseInt(nightsQnttText.getText());
        
        //getting the Text Field and parseing into a Integer (it will have a limit between 0 and 1)
        singleBedsQnttlbl = Integer.parseInt(singleBedsQnttText.getText());
        
        //getting the Text Field and parseing into a Integer (it will have a limit between 0 and 1)
        doubleBedsQnttlbl = Integer.parseInt(singleBedsQnttText.getText());
        
        //getting the Text Field and parseing into a Integer (it will have a limit between 1 and 2)
        bathQnttlbl = Integer.parseInt(bathQnttText.getText());
       
    }//GEN-LAST:event_firstNameTextActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        
        //declare + create assessment object called as objA
        hotelBookings objA = new hotelBookings();
        
        //get the text from text fields and parseing when it's expected an integer
        firstName = firstNameText.getText();
        lastName = lastNameText.getText();
        nightsQntt = Integer.parseInt(nightsQnttText.getText());
        singleBedsQnttlbl = Integer.parseInt(singleBedsQnttText.getText());
        doubleBedsQnttlbl = Integer.parseInt(doubleBedsQnttText.getText());
        bathQnttlbl = Integer.parseInt(bathQnttText.getText());
       
        //adding details to the object objA
        objA.setFirstName(firstName);
        objA.setLastName(lastName);
        objA.setNightsQntt(nightsQntt);
        objA.setSingleBedsQntt(singleBedsQnttlbl);
        objA.setDoubleBedsQntt(doubleBedsQnttlbl);
        objA.setBathQntt(bathQnttlbl);
        objA.setFinalPrice(finalPrice);
        
        //adding object to arraylist with the condition that the field has content
        if ((firstName.equals(""))
                ||lastName.equals("")){
            JOptionPane.showMessageDialog(null, "Missing name or surname.");
            counterbreak = 1;
        } else {
            aList.add(objA);
            counterbreak = 0;
        }
        
        // Saving input in a file .data
        File outFile;
        FileOutputStream fStream;
        ObjectOutputStream oStream;
       
        if(counterbreak == 0){
            //defining a block of code to be tested for errors while it's running
            try{
                outFile = new File("bookings.data");
                fStream = new FileOutputStream(outFile);
                oStream = new ObjectOutputStream(fStream);

                oStream.writeObject(aList);

                JOptionPane.showMessageDialog(null, "File successful");

                oStream.close();
            }

            //defining a block of code to be executed.
            catch(IOException e) {
                System.out.println(e);
            }
        }
        
        //incrementing counter
        count++;
    }//GEN-LAST:event_addBtnActionPerformed

    private void displayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBtnActionPerformed
        // TODO add your handling code here:
        
        //checking in the array which was the last input made 
        for(int i = (aList.size()-1) ; i < aList.size(); i++){
        JOptionPane.showMessageDialog(null, "Name: " + aList.get(i).getFirstName() +
                                            "\n Type: " + aList.get(i).getLastName() +
                                            "\n Nights: " + aList.get(i).getNightsQntt() +
                                            "\n Single Beds: " + aList.get(i).getSingleBedsQntt() +
                                            "\n Double Beds: " + aList.get(i).getDoubleBedsQntt() +
                                            "\n Bathrooms: " + aList.get(i).getBathQntt()
                                     );
        
        }
    }//GEN-LAST:event_displayBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        
        //creating a string to search inside the array by last name
        String searchType = JOptionPane.showInputDialog(null, "insert type: ");
        {
        // looping through array to find the entry by last name
        for (hotelBookings x:aList) {
            if(searchType.equalsIgnoreCase(x.getLastName())){
            JOptionPane.showMessageDialog(null, "Name: " + x.getFirstName() +
                                                "\n Type: " + x.getLastName() +
                                                "\n Nights: " + x.getNightsQntt() +
                                                "\n Single Beds: " + x.getSingleBedsQntt() +
                                                "\n Double Beds: " + x.getDoubleBedsQntt() +
                                                "\n Bathrooms: " + x.getBathQntt()
                                         );
                }
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        
        //checking if the user has input name or surname on the fields to delete
        if(firstNameText.getText().equals("")
                ||lastNameText.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Sorry, Name or Surname missing");
        }
        // checking if the array isn't already empty
        else if(count == 0) {
            JOptionPane.showMessageDialog(null, "There isn't entries on the booking system");
            }
            else {
            //getting the first and last name to 
                firstName = firstNameText.getText();
                lastName = lastNameText.getText();
                
                // looping through array to delete entry based on first and last name inserted
                for(int i=0; i<aList.size(); i =i+1){
                    if(aList.get(i).getFirstName().equals(firstName)&&aList.get(i).getLastName().equals(lastName))
                    
                        {
                        aList.remove(i);
                        count = count - 1;
                        
                        // confirming that the entry was deleted
                        JOptionPane.showMessageDialog(null, "The Booking for "+firstName + " " +lastName+" was deleted from the system.");
                        break;}
                   
                        // re-writing the bookings.data for the system understand that the archive was updated -- TO WORK, IT'S NECESSARY TO PRESS DELETE 2 TIMES... we couldn't understand why(?)
                        //defining a block of code to be tested for errors while it's running
                        try{
                            File outFile = new File("bookings.data");
                            FileOutputStream fStream = new FileOutputStream(outFile);
                            ObjectOutputStream oStream = new ObjectOutputStream(fStream);

                            oStream.writeObject(aList);

                            oStream.close();
                        }

                        //defining a block of code to be executed.
                        catch(IOException e) {
                            System.out.println(e);
                        }
                    
                        //letting the User know that the entry wasn't found
                        if (i == count-1) {
                        JOptionPane.showMessageDialog(null, "Sorry, reservation not found");
                }
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    
    private void readBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readBtnActionPerformed
        // TODO add your handling code here:
        File inFile;
        FileInputStream fStream;
        ObjectInputStream oStream;
        
        
        try{
            inFile = new File("bookings.data");
            fStream = new FileInputStream(inFile);
            oStream = new ObjectInputStream(fStream);
            
            //this code will read through the archive already created -- IF THE APP IS REOPENED, THE NEW INSERTION WILL REWRITE THE ARCHIVE
            ArrayList <hotelBookings> xList;
            xList = (ArrayList<hotelBookings>)oStream.readObject();
            
            for(hotelBookings x:xList) {
            JOptionPane.showMessageDialog(null, "Name: " + x.getFirstName() +
                                                "\n Type: " + x.getLastName() +
                                                "\n Nights: " + x.getNightsQntt() +
                                                "\n Single Beds: " + x.getSingleBedsQntt() +
                                                "\n Double Beds: " + x.getDoubleBedsQntt() +
                                                "\n Bathrooms: " + x.getBathQntt()
                                         );
            }
            
            oStream.close();
        }
       
        catch (IOException e) {
            System.out.println(e);
        }
        
        catch(ClassNotFoundException ex) {
            System.out.println(ex);
        }
       
    }//GEN-LAST:event_readBtnActionPerformed

    private void nightsQnttTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nightsQnttTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nightsQnttTextActionPerformed

    private void singleBedsQnttTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleBedsQnttTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_singleBedsQnttTextActionPerformed

    private void bathQnttTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bathQnttTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bathQnttTextActionPerformed

    private void doubleBedsQnttTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleBedsQnttTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doubleBedsQnttTextActionPerformed

    private void checkPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPriceActionPerformed
        // TODO add your handling code here:
      
        
        //checking the entries for quantity of nights are under the conditions defined (limit between 1 and 7)
        if ((Integer.parseInt(nightsQnttText.getText())==0)
                ||(Integer.parseInt(nightsQnttText.getText()))>7){
            counterbreak = 1;
            JOptionPane.showMessageDialog(null, "Please, insert a period between 1 and 7 days.");
        } else { 
            finalPrice = nightPrice * Integer.parseInt(nightsQnttText.getText());
        }
                 
        
        //checking if the user entried, at least, a number for single or double bed under the conditions defined (limit between 1 and 7)
        if ((Integer.parseInt(singleBedsQnttText.getText())==0)
                &&(Integer.parseInt(doubleBedsQnttText.getText())==0)) {
            counterbreak = 1;
            JOptionPane.showMessageDialog(null, "Please, select at least, 1 single or 1 double bed.");         
        } else {
        
            
            //checking the entries for single beds are under the conditions defined (limit between 0 and 1)
            if ((Integer.parseInt(singleBedsQnttText.getText())==0)
                    ||(Integer.parseInt(singleBedsQnttText.getText())==1)){
                finalPrice = finalPrice + ((Integer.parseInt(singleBedsQnttText.getText()) * singlePrice) * (Integer.parseInt(nightsQnttText.getText())));
            } else {
                counterbreak = 1;
                JOptionPane.showMessageDialog(null, "Please, insert a number for single beds between 0 and 1.");
            }


            //checking the entries for double beds are under the conditions defined (limit between 0 and 1)
            if ((Integer.parseInt(doubleBedsQnttText.getText())==0)||(Integer.parseInt(doubleBedsQnttText.getText())==1)){
                finalPrice = finalPrice + ((Integer.parseInt(doubleBedsQnttText.getText())*doublePrice) * Integer.parseInt(nightsQnttText.getText()));
            } else {
                counterbreak = 1;
                JOptionPane.showMessageDialog(null, "Please, insert a number for double beds between 0 and 1.");
            }
        }
        
        
        //checking the entries for bathrooms are under the conditions defined (limit between 1 and 2)
        if ((Integer.parseInt(bathQnttText.getText())==1)
                ||(Integer.parseInt(bathQnttText.getText())==2)){
            finalPrice = finalPrice + ((Integer.parseInt(bathQnttText.getText())*bathPrice) * Integer.parseInt(nightsQnttText.getText()));
        } else { 
            counterbreak = 1;
            JOptionPane.showMessageDialog(null, "Please, insert a number for bathrooms between 1 and 2.");
        }
        
        //Final price is a variable that will be increasing by each of the validations above and it will be shown when requested
        if (counterbreak!=1){
            JOptionPane.showMessageDialog(null, "Final Price is  " + finalPrice );
        } else {
            counterbreak = 0;
        }
        
    }//GEN-LAST:event_checkPriceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hotelBookingsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hotelBookingsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hotelBookingsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hotelBookingsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hotelBookingsGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel bathQntt;
    private javax.swing.JTextField bathQnttText;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton checkPrice;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton displayBtn;
    private javax.swing.JLabel doubleBedsQntt;
    private javax.swing.JTextField doubleBedsQnttText;
    private javax.swing.JTextField firstNameText;
    private javax.swing.JLabel firstNamelbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField lastNameText;
    private javax.swing.JLabel lastNamelbl;
    private javax.swing.JTextField nightsQnttText;
    private javax.swing.JLabel nightsQnttlbl;
    private javax.swing.JButton readBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel singleBedsQntt;
    private javax.swing.JTextField singleBedsQnttText;
    private javax.swing.JLabel titlelbl;
    // End of variables declaration//GEN-END:variables
}
